% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rasterize_mesh.R
\name{rasterize_mesh}
\alias{rasterize_mesh}
\title{Rasterize an OBJ file}
\usage{
rasterize_mesh(
  mesh,
  filename = NA,
  width = 400,
  height = 400,
  line_info = NULL,
  alpha_line = 0.5,
  parallel = TRUE,
  fov = 20,
  lookfrom = c(0, 0, 10),
  lookat = NULL,
  camera_up = c(0, 1, 0),
  scale_obj = 1,
  light_info = directional_light(),
  color = "red",
  type = "diffuse",
  background = "black",
  tangent_space_normals = TRUE,
  ambient_color = c(0, 0, 0),
  exponent = 32,
  specular_intensity = 0.6,
  emission_intensity = 1,
  override_exponent = FALSE,
  diffuse_intensity = 1,
  shadow_map = FALSE,
  shadow_map_bias = 0.005,
  shadow_map_intensity = 0.5,
  shadow_map_dims = NULL,
  ssao = FALSE,
  ssao_intensity = 10,
  ssao_radius = 0.1,
  tonemap = "none",
  debug = "none",
  near_plane = 0.1,
  far_plane = 100,
  culling = "back",
  shader = "default",
  double_sided = FALSE,
  block_size = 4,
  shape = NULL,
  line_offset = -1e-05,
  ortho_dims = c(1, 1)
)
}
\arguments{
\item{shape}{Default `NULL`. The shape to render in the OBJ mesh.}

\item{obj_model}{A two-dimensional matrix, where each entry in the matrix is the elevation at that point. All points are assumed to be evenly spaced.}

\item{...}{Other parameters to pass to `rasterize_mesh()`.}
}
\value{
Rasterized image.
}
\description{
Rasterize an OBJ file
}
\examples{
#Let's load the cube OBJ file included with the package

cube_model = read_obj(cube_obj())

rasterize_mesh(cube_model,lookfrom=c(2,4,10), 
              light_info = directional_light(direction=c(0.5,1,0.7)))

#Flatten the cube, translate downwards, and set to grey
base = cube_model \%>\% 
 scale_mesh(scale=c(5,0.2,5)) \%>\%
 translate_mesh(c(0,-0.1,0)) \%>\% 
 set_material(diffuse="grey80") 

rasterize_mesh(base, lookfrom=c(2,4,10), 
              light_info = directional_light(direction=c(0.5,1,0.7)))

#load the R OBJ file, scale it down, color it blue, and add it to the grey base
r_model = r_obj() \%>\% 
 read_obj() \%>\% 
 scale_mesh(scale=0.5) \%>\% 
 set_material(diffuse="dodgerblue") \%>\% 
 add_shape(cube_model_flat)

rasterize_mesh(r_model, lookfrom=c(2,4,10), 
              light_info = directional_light(direction=c(0.5,1,0.7)))
              
#Zoom in and turn on shadow mapping
rasterize_mesh(r_model, lookfrom=c(2,4,10), fov=10,shadow_map = TRUE,
              light_info = directional_light(direction=c(0.5,1,0.7)))

#Include the resolution (4x) of the shadow map for less pixellation around the edges
#Also decrease the shadow_map_bias slightly to remove the "peter panning" floating shadow effect
rasterize_mesh(r_model, lookfrom=c(2,4,10), fov=10,
              shadow_map = TRUE, shadow_map_dims=4, shadow_map_bias=0.001,
              light_info = directional_light(direction=c(0.5,1,0.7)))
              
#Add some more directional lights and change their color
lights = directional_light(c(0.7,1.1,-0.9),color = "orange",intensity = 1) \%>\% 
           add_light(directional_light(c(0.7,1,1),color = "dodgerblue",intensity = 1)) \%>\% 
           add_light(directional_light(c(2,4,10),color = "white",intensity = 0.5))
           
rasterize_mesh(r_model, lookfrom=c(2,4,10), fov=10,
              shadow_map = TRUE, shadow_map_dims=4, shadow_map_bias=0.001,
              light_info = lights)
              
#Add some point lights
lights_p = lights \%>\% 
 add_light(point_light(position=c(-1,1,0),color="red", intensity=10)) \%>\% 
 add_light(point_light(position=c(1,1,0),color="purple", intensity=10)) 

rasterize_mesh(r_model, lookfrom=c(2,4,10), fov=10,
              shadow_map = TRUE, shadow_map_dims=4, shadow_map_bias=0.001,
              light_info = lights_p)
              
#change the camera position
rasterize_mesh(r_model, lookfrom=c(-2,2,-10), fov=10,
              shadow_map = TRUE, shadow_map_dims=4, shadow_map_bias=0.001,
              light_info = lights_p)
}
